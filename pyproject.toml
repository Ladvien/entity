[tool.poetry]
name = "entity"
version = "0.0.1"
description = "Entity agentic system with PostgreSQL memory"
authors = ["C. Thomas Brittain <cthomasbrittain@hotmail.com>"]
license = "MIT"
readme = "README.md"
package-mode = true

packages = [
    { include = "pipeline", from = "src" },
    { include = "cli", from = "src" },
    { include = "entity_config", from = "src" },
    { include = "registry", from = "src" },
    { include = "plugins", from = "src" },
    { include = "entity", from = "src" },
    { include = "common_interfaces", from = "src" },
    { include = "tools", from = "src" },
    { include = "entity", from = "src" },
    { include = "user_plugins" },
]

[tool.poetry.scripts]
entity-cli = "src.cli:main"
entity-config-validate = "src.entity_config.validator:main"
entity-config-migrate = "src.entity_config.migrate:main"


[tool.poetry.urls]
homepage = "https://github.com/Ladvien/entity"
repository = "https://github.com/Ladvien/entity"
documentation = "https://entity.readthedocs.io/en/latest/"

[tool.poetry.dependencies]
python = "^3.11"
pyyaml = "^6.0.2"
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
asyncpg = "^0.30.0"
python-dotenv = "^1.1.1"
aiosqlite = "^0.20.0"
pgvector = "^0.4.1"
httpx = "0.27.*"
aioboto3 = "^15.0.0"
duckdb = "^1.3.1"
cdktf = "^0.21.0"
cdktf-cdktf-provider-aws = "^21.1.0"
constructs = "^10.3.0"
redis = "^5.0.0"
prometheus-client = "^0.20.0"
psutil = "^5.9.8"
opentelemetry-api = "^1.24.0"
opentelemetry-sdk = "^1.24.0"
tenacity = "^8.2.3"
msgpack = "^1.0.5"
protobuf = "^6.31.0"
cryptography = "^45.0.5"
websockets = "^15.0"
grpcio = "^1.62.2"
grpcio-tools = "^1.62.2"

[tool.poetry.extras]
examples = [
    "websockets",
    "grpcio",
    "grpcio-tools",
]

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
sphinx = "^8.1.3"
myst-parser = "^4.0.1"
sphinx-autobuild = "^2024.10.3"
furo = "^2024.8.6"
sphinx-autoapi = "^3.5.0"
sphinx-autodoc2 = "^0.5.0"
poethepoet = "^0.32.2"
pytest = "^8.4.1"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.1.0"
hypothesis = "^6.100"
pytest-benchmark = "^4.0.0"
flake8 = "7.0.0"
bandit = "^1.8.5"
pydeps = "^3.0.1"
types-protobuf = "^5.26.0.20240422"
types-psutil = "^5.9.5.20240516"
pytest-postgresql = "^7.0.2"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
docs = { cmd = "sphinx-build docs/source docs/build/html" }
docs_view = { cmd = "sphinx-autobuild docs/source docs/build/html" }
patch = { cmd = "poetry version patch" }
_publish = { cmd = "poetry publish --build" }
release = ["docs", "patch", "_publish"]
test = { cmd = "pytest" }
test-verbose = { cmd = "pytest -v" }
test-coverage = { cmd = "pytest --cov=src --cov-report=html --cov-report=term-missing" }
setup-dev = { cmd = "poetry install --with dev" }
[tool.poe.tasks.lint]
sequence = [
    { cmd = "poetry run black src tests" },
    { cmd = "poetry run isort src tests" },
    { cmd = "poetry run flake8 src tests" },
]
[tool.poe.tasks.validate]
sequence = [
    { cmd = "python -m src.entity_config.validator --config config/dev.yaml" },
    { cmd = "python -m src.entity_config.validator --config config/prod.yaml" },
    { cmd = "python -m src.registry.validator" },
]
[tool.poe.tasks.check]
sequence = [
    { ref = "lint" },
    { cmd = "poetry run mypy src" },
    { cmd = "bandit -r src" },
    { ref = "validate" },
    { cmd = "pytest" },
]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--durations=10",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, use real components)",
    "slow: Slow tests (may take several seconds)",
    "memory: Tests related to memory system",
    "tools: Tests related to tool system",
    "api: Tests related to API endpoints",
    "cli: Tests related to CLI interface",
    "benchmark: Performance benchmarking tests",
    "examples: Tests that run example scripts",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:sentence_transformers.*",
]
minversion = "6.0"
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

# Black formatting configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | src/cli/templates
)/
'''

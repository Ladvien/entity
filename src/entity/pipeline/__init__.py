"""Pipeline component:   init  ."""

from __future__ import annotations

import pkgutil

from importlib import import_module
from typing import TYPE_CHECKING, Any

__path__ = pkgutil.extend_path(globals().get("__path__", []), __name__)

from .stages import PipelineStage
from .exceptions import CircuitBreakerTripped
from entity.core.circuit_breaker import CircuitBreaker, RetryPolicy

# Registry classes are no longer imported eagerly.
# Access ``PluginRegistry`` and related classes via ``registry`` or
# rely on this module's ``__getattr__`` for lazy loading.

# Expose plugin configuration API used by the pipeline package


if TYPE_CHECKING:  # pragma: no cover - imported for type checking only
    from entity.core.state import FailureInfo, LLMResponse, PipelineState

__all__ = [
    "PipelineStage",
    "PipelineState",
    "PluginContext",
    "ConversationEntry",
    "ToolCall",
    "LLMResponse",
    "FailureInfo",
    "RetryPolicy",
    "CircuitBreaker",
    "CircuitBreakerTripped",
    "Plugin",
    "InfrastructurePlugin",
    "ResourcePlugin",
    "AgentResource",
    "ToolPlugin",
    "PromptPlugin",
    "AdapterPlugin",
    "InputAdapterPlugin",
    "OutputAdapterPlugin",
    "FailurePlugin",
    "AutoGeneratedPlugin",
    "ValidationResult",
    "ReconfigResult",
    "ConfigurationError",
    "ClassRegistry",
    "SystemInitializer",
    "initialization_cleanup_context",
    "execute_pipeline",
    "create_default_response",
    "create_static_error_response",
    "ConfigUpdateResult",
    "update_plugin_configuration",
    "StateLogger",
    "LogReplayer",
    "Agent",
    "AgentRuntime",
    "Pipeline",
    "Workflow",
    "PipelineWorker",
    "execute_with_observability",
    "pipeline",
    "initializer",
    "utils",
]


def __getattr__(name: str) -> Any:
    """Lazily expose heavy pipeline modules."""

    if name in {
        "PluginRegistry",
        "ResourceContainer",
        "SystemRegistries",
        "ToolRegistry",
        "ClassRegistry",
        "SystemInitializer",
        "initialization_cleanup_context",
    }:
        from entity.core.registries import (
            PluginRegistry,
            SystemRegistries,
            ToolRegistry,
        )
        from entity.core.resources.container import ResourceContainer

        from .initializer import (
            ClassRegistry,
            SystemInitializer,
            initialization_cleanup_context,
        )

        return {
            "PluginRegistry": PluginRegistry,
            "ResourceContainer": ResourceContainer,
            "SystemRegistries": SystemRegistries,
            "ToolRegistry": ToolRegistry,
            "ClassRegistry": ClassRegistry,
            "SystemInitializer": SystemInitializer,
            "initialization_cleanup_context": initialization_cleanup_context,
        }[name]

    heavy_imports = {
        "Agent": "entity.pipeline.agent",
        "Pipeline": "entity.pipeline.workflow",
        "Workflow": "entity.pipeline.workflow",
        "PipelineWorker": "entity.worker.pipeline_worker",
        "execute_pipeline": "entity.pipeline.pipeline",
        "visualize_execution_plan": "entity.pipeline.pipeline",
        "create_default_response": "entity.pipeline.pipeline",
        "create_static_error_response": "entity.pipeline.errors",
        "ConfigUpdateResult": "entity.pipeline.config.config_update",
        "update_plugin_configuration": "entity.pipeline.config.config_update",
        "StateLogger": "entity.core.state_logger",
        "LogReplayer": "entity.core.state_logger",
        "pipeline": "entity.pipeline.pipeline",
        "initializer": "entity.pipeline.initializer",
        "utils": "entity.pipeline.utils",
        "ClassRegistry": "entity.pipeline.initializer",
        "SystemInitializer": "entity.pipeline.initializer",
        "initialization_cleanup_context": "entity.pipeline.initializer",
        "AgentRuntime": "entity.core.agent",
        "PipelineStage": "entity.pipeline.stages",
        "PluginContext": "entity.core.context",
        "ConversationEntry": "entity.core.state",
        "ToolCall": "entity.core.state",
        "FailureInfo": "entity.core.state",
        "LLMResponse": "entity.core.state",
        "PipelineState": "entity.core.state",
        "Plugin": "entity.core.plugins",
        "InfrastructurePlugin": "entity.core.plugins",
        "ResourcePlugin": "entity.core.plugins",
        "AgentResource": "entity.core.plugins",
        "ToolPlugin": "entity.core.plugins",
        "PromptPlugin": "entity.core.plugins",
        "AdapterPlugin": "entity.core.plugins",
        "InputAdapterPlugin": "entity.core.plugins",
        "OutputAdapterPlugin": "entity.core.plugins",
        "FailurePlugin": "entity.core.plugins",
        "AutoGeneratedPlugin": "entity.core.plugins",
        "ValidationResult": "entity.core.plugins",
        "ReconfigResult": "entity.core.plugins",
        "ConfigurationError": "entity.core.plugins",
    }

    if name in heavy_imports:
        module = import_module(heavy_imports[name])
        attr = getattr(module, name)
        if name in {
            "Plugin",
            "PromptPlugin",
            "AdapterPlugin",
            "InputAdapterPlugin",
            "OutputAdapterPlugin",
            "AutoGeneratedPlugin",
            "ToolPlugin",
            "FailurePlugin",
            "ResourcePlugin",
        }:
            from entity.core.plugins import utils as plugin_utils

            if plugin_utils.plugin_base_registry.auto_plugin is object:
                plugin_utils.configure_plugins(
                    module.Plugin,
                    module.PromptPlugin,
                    module.AdapterPlugin,
                    module.AutoGeneratedPlugin,
                    module.ToolPlugin,
                    module.FailurePlugin,
                    module.ResourcePlugin,
                )
        return attr

    raise AttributeError(f"module {__name__} has no attribute {name}")

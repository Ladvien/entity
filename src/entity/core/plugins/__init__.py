from __future__ import annotations

"""Minimal plugin base classes."""

from dataclasses import dataclass
from typing import Any, Dict, List


@dataclass
class ValidationResult:
    success: bool
    error_message: str | None = None
    requires_restart: bool = False

    @classmethod
    def success_result(cls) -> "ValidationResult":
        return cls(True)

    @classmethod
    def error_result(
        cls, message: str, requires_restart: bool = False
    ) -> "ValidationResult":
        return cls(False, message, requires_restart)


@dataclass
class ReconfigResult:
    success: bool
    error_message: str | None = None
    requires_restart: bool = False
    warnings: List[str] = None


class ConfigurationError(Exception):
    pass


class BasePlugin:
    stages: List[str] = []

    def __init__(self, config: Dict | None = None) -> None:
        self.config = config or {}

    async def execute(self, context: Any) -> None:
        await self._execute_impl(context)

    async def _execute_impl(self, context: Any) -> None:  # noqa: D401, ARG002
        """Override in subclasses."""
        raise NotImplementedError


class ResourcePlugin(BasePlugin):
    pass


class ToolPlugin(BasePlugin):
    pass


class PromptPlugin(BasePlugin):
    pass


class AdapterPlugin(BasePlugin):
    pass


class FailurePlugin(BasePlugin):
    pass


class AutoGeneratedPlugin(BasePlugin):
    pass


__all__ = [
    "BasePlugin",
    "ResourcePlugin",
    "ToolPlugin",
    "PromptPlugin",
    "AdapterPlugin",
    "FailurePlugin",
    "AutoGeneratedPlugin",
    "ValidationResult",
    "ReconfigResult",
    "ConfigurationError",
]

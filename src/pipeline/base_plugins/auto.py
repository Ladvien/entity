from __future__ import annotations

import inspect
from typing import List, Optional

from ..stages import PipelineStage
from .base import BasePlugin


class AutoGeneratedPlugin(BasePlugin):
    def __init__(
        self,
        func,
        stages: List[PipelineStage],
        priority: int,
        name: str,
        base_class: Optional[type] = None,
    ):
        super().__init__()
        self.func = func
        self.stages = stages
        self.priority = priority
        self.name = name
        if base_class and base_class is not BasePlugin:
            self.__class__.__bases__ = (base_class,)

    async def _execute_impl(self, context: "PluginContext") -> None:
        if not inspect.iscoroutinefunction(self.func):
            raise TypeError(
                f"Plugin function '{getattr(self.func, '__name__', 'unknown')}' must be async"
            )
        result = await self.func(context)
        if isinstance(result, str) and not context.has_response():
            context.set_response(result)

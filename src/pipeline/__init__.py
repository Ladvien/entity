from common_interfaces.base_plugin import BasePlugin

from .agent import Agent
from .base_plugins import (AdapterPlugin, AutoGeneratedPlugin,
                           ConfigurationError, FailurePlugin, PromptPlugin,
                           ReconfigResult, ResourcePlugin, ToolPlugin,
                           ValidationResult)
from .builder import AgentBuilder
from .config_update import ConfigUpdateResult, update_plugin_configuration
from .context import ConversationEntry, PluginContext, ToolCall
from .conversation_manager import ConversationManager
from .decorators import plugin
from .errors import create_static_error_response
from .initializer import (ClassRegistry, SystemInitializer,
                          initialization_cleanup_context)
from .interfaces import PluginAutoClassifier, import_plugin_class
from .manager import PipelineManager
from .metrics import MetricsCollector
from .observability import execute_with_observability
from .pipeline import create_default_response, execute_pipeline
# Registry classes are no longer imported eagerly.
# Access ``PluginRegistry`` and related classes via ``registry`` or
# rely on this module's ``__getattr__`` for lazy loading.
from .resources import LLM, BaseResource, Resource
from .runtime import AgentRuntime
from .stages import PipelineStage
from .state import FailureInfo, LLMResponse, PipelineState

# isort: off


# isort: on
__all__ = [
    "PipelineStage",
    "PipelineState",
    "PluginContext",
    "ConversationEntry",
    "ToolCall",
    "LLMResponse",
    "LLM",
    "Resource",
    "BaseResource",
    "FailureInfo",
    "MetricsCollector",
    "BasePlugin",
    "ResourcePlugin",
    "ToolPlugin",
    "PromptPlugin",
    "AdapterPlugin",
    "FailurePlugin",
    "AutoGeneratedPlugin",
    "plugin",
    "PluginAutoClassifier",
    "ValidationResult",
    "ReconfigResult",
    "ConfigurationError",
    "ClassRegistry",
    "SystemInitializer",
    "import_plugin_class",
    "initialization_cleanup_context",
    "execute_pipeline",
    "create_default_response",
    "create_static_error_response",
    "ConfigUpdateResult",
    "update_plugin_configuration",
    "Agent",
    "AgentBuilder",
    "AgentRuntime",
    "PipelineManager",
    "ConversationManager",
    "execute_with_observability",
]


def __getattr__(name: str):
    """Lazily expose registry classes."""

    if name in {
        "PluginRegistry",
        "ResourceContainer",
        "SystemRegistries",
        "ToolRegistry",
    }:
        from registry import (PluginRegistry, ResourceContainer,
                              SystemRegistries, ToolRegistry)

        return {
            "PluginRegistry": PluginRegistry,
            "ResourceContainer": ResourceContainer,
            "SystemRegistries": SystemRegistries,
            "ToolRegistry": ToolRegistry,
        }[name]
    raise AttributeError(f"module {__name__} has no attribute {name}")

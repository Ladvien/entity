from common_interfaces import plugins as _plugin_api

from .agent import Agent
from .base_plugins import (
    AdapterPlugin,
    AutoGeneratedPlugin,
    BasePlugin,
    ConfigurationError,
    FailurePlugin,
    PromptPlugin,
    ReconfigResult,
    ResourcePlugin,
    ToolPlugin,
    ValidationResult,
)
from .builder import AgentBuilder
from .config_update import ConfigUpdateResult, update_plugin_configuration
from .context import ConversationEntry, PluginContext, ToolCall
from .conversation_manager import ConversationManager
from .decorators import plugin
from .errors import create_static_error_response
from .interfaces import PluginAutoClassifier, import_plugin_class
from .manager import PipelineManager
from .metrics import MetricsCollector
from .observability import execute_with_observability
from .pipeline import create_default_response, execute_pipeline
# Registry classes are no longer imported eagerly.
# Access ``PluginRegistry`` and related classes via ``registry`` or
# rely on this module's ``__getattr__`` for lazy loading.
from .resources import LLM, BaseResource, Resource
from .runtime import AgentRuntime
from .stages import PipelineStage
from .user_plugins import BasePlugin

# isort: off
from .state import FailureInfo, LLMResponse, PipelineState
from common_interfaces import plugins as plugin_utils

# isort: on


# isort: on
__all__ = [
    "PipelineStage",
    "PipelineState",
    "PluginContext",
    "ConversationEntry",
    "ToolCall",
    "LLMResponse",
    "LLM",
    "Resource",
    "BaseResource",
    "FailureInfo",
    "MetricsCollector",
    "BasePlugin",
    "ResourcePlugin",
    "ToolPlugin",
    "PromptPlugin",
    "AdapterPlugin",
    "FailurePlugin",
    "AutoGeneratedPlugin",
    "plugin",
    "PluginAutoClassifier",
    "ValidationResult",
    "ReconfigResult",
    "ConfigurationError",
    "ClassRegistry",
    "SystemInitializer",
    "import_plugin_class",
    "initialization_cleanup_context",
    "execute_pipeline",
    "create_default_response",
    "create_static_error_response",
    "ConfigUpdateResult",
    "update_plugin_configuration",
    "Agent",
    "AgentBuilder",
    "AgentRuntime",
    "PipelineManager",
    "ConversationManager",
    "execute_with_observability",
]


def __getattr__(name: str) -> Any:
    """Lazily expose registry classes."""

    if name in {
        "PluginRegistry",
        "ResourceContainer",
        "SystemRegistries",
        "ToolRegistry",
        "ClassRegistry",
        "SystemInitializer",
        "initialization_cleanup_context",
    }:
        from registry import (PluginRegistry, ResourceContainer,
                              SystemRegistries, ToolRegistry)

        from .initializer import (
            ClassRegistry,
            SystemInitializer,
            initialization_cleanup_context,
        )

        return {
            "PluginRegistry": PluginRegistry,
            "ResourceContainer": ResourceContainer,
            "SystemRegistries": SystemRegistries,
            "ToolRegistry": ToolRegistry,
            "ClassRegistry": ClassRegistry,
            "SystemInitializer": SystemInitializer,
            "initialization_cleanup_context": initialization_cleanup_context,
        }[name]
    raise AttributeError(f"module {__name__} has no attribute {name}")


plugin_utils.configure_plugins(
    base_plugin=BasePlugin,
    prompt_plugin=PromptPlugin,
    adapter_plugin=AdapterPlugin,
    auto_plugin=AutoGeneratedPlugin,
)

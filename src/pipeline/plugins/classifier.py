from __future__ import annotations

import inspect
from typing import Any, Dict, Optional, cast

from ..base_plugins import (AdapterPlugin, AutoGeneratedPlugin, BasePlugin,
                            PromptPlugin, ToolPlugin)
from ..stages import PipelineStage


class PluginAutoClassifier:
    """Utility to generate plugin classes from async functions."""

    @staticmethod
    def classify(
        plugin_func: Any, user_hints: Optional[Dict[str, Any]] | None = None
    ) -> AutoGeneratedPlugin:
        """Classify ``plugin_func`` and return an :class:`AutoGeneratedPlugin`."""

        if not inspect.iscoroutinefunction(plugin_func):
            raise TypeError(
                f"Plugin function '{getattr(plugin_func, '__name__', 'unknown')}' must be async"
            )

        hints = user_hints or {}
        try:
            source = inspect.getsource(plugin_func)
        except OSError:
            source = ""

        base: type[BasePlugin]
        if any(k in source for k in ["think", "reason", "analyze"]):
            stage = PipelineStage.THINK
            base = cast(type[BasePlugin], PromptPlugin)
        elif any(k in source for k in ["parse", "validate", "check"]):
            stage = PipelineStage.PARSE
            base = cast(type[BasePlugin], AdapterPlugin)
        elif any(k in source for k in ["return", "response", "answer"]):
            stage = PipelineStage.DO
            base = (
                cast(type[BasePlugin], ToolPlugin)
                if any(x in source for x in ["use_tool", "execute_tool", "tool"])
                else cast(type[BasePlugin], PromptPlugin)
            )
        else:
            stage = PipelineStage.DO
            base = cast(type[BasePlugin], ToolPlugin)

        if "stage" in hints:
            stage = PipelineStage.from_str(str(hints["stage"]))

        priority = int(hints.get("priority", 50))
        name = hints.get("name", plugin_func.__name__)

        return AutoGeneratedPlugin(
            func=plugin_func,
            stages=[stage],
            priority=priority,
            name=name,
            base_class=base,
        )

    @staticmethod
    def classify_and_route(
        plugin_func: Any, user_hints: Optional[Dict[str, Any]] | None = None
    ) -> AutoGeneratedPlugin:
        """Backward-compatible wrapper for :meth:`classify`."""

        return PluginAutoClassifier.classify(plugin_func, user_hints)

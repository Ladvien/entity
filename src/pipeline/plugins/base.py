from __future__ import annotations

from typing import TYPE_CHECKING, Dict, Type

from ..base_plugins import AdapterPlugin, AutoGeneratedPlugin
from ..base_plugins import BasePlugin as _BasePlugin
from ..base_plugins import (
    ConfigurationError,
    FailurePlugin,
    PromptPlugin,
    ReconfigResult,
    ResourcePlugin,
    ToolPlugin,
)
from ..validation import ValidationResult

if TYPE_CHECKING:  # pragma: no cover - used for type hints only
    from ..initializer import ClassRegistry


class BasePlugin(_BasePlugin):
    """Base plugin with validation hooks."""

    @classmethod
    def validate_config(cls: Type["BasePlugin"], config: Dict) -> ValidationResult:
        return ValidationResult.success_result()

    @classmethod
    def validate_dependencies(
        cls: Type["BasePlugin"], registry: "ClassRegistry"
    ) -> ValidationResult:
        return ValidationResult.success_result()


__all__ = [
    "BasePlugin",
    "ResourcePlugin",
    "ToolPlugin",
    "PromptPlugin",
    "AdapterPlugin",
    "FailurePlugin",
    "AutoGeneratedPlugin",
    "ReconfigResult",
    "ConfigurationError",
]

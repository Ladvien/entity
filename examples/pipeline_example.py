from pipeline import (
    PipelineStage,
    PluginRegistry,
    ResourceRegistry,
    ToolRegistry,
    SystemRegistries,
    execute_pipeline,
    AutoGeneratedPlugin,
    ToolPlugin,
    PromptPlugin,
)

from pipeline.plugins.resources.echo_llm import EchoLLMResource
from pipeline.plugins.tools.calculator_tool import CalculatorTool


def hello_plugin(ctx):
    if "hello" in ctx.message.lower():
        return "Hello there!"


def weather_tool(params):
    city = params.get("city", "San Francisco")
    return f"Weather in {city} is sunny"


class WeatherTool(ToolPlugin):
    stages = [PipelineStage.DO]

    async def execute_function(self, params):
        return weather_tool(params)


def setup_registries():
    plugins = PluginRegistry()
    resources = ResourceRegistry()
    tools = ToolRegistry()

    tools.add("weather", WeatherTool())
    tools.add("calculator", CalculatorTool())

    resources.add("ollama", EchoLLMResource())

    plugins.register_plugin_for_stage(
        AutoGeneratedPlugin(hello_plugin, [PipelineStage.DO], 50, "hello_plugin", PromptPlugin),
        PipelineStage.DO,
    )

    return SystemRegistries(resources=resources, tools=tools, plugins=plugins)


async def main():
    registries = setup_registries()
    response = await execute_pipeline("hello", registries)
    print(response)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())

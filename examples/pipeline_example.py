"""Simple pipeline execution example without installing the package."""

from __future__ import annotations

import pathlib
import sys
from typing import Any, Dict

# Ensure the repository's ``src`` directory is available for imports
sys.path.append(str(pathlib.Path(__file__).resolve().parents[1] / "src"))

from pipeline import (
    AutoGeneratedPlugin,
    PipelineStage,
    PluginRegistry,
    PromptPlugin,
    ResourcePlugin,
    ResourceRegistry,
    SystemRegistries,
    ToolPlugin,
    ToolRegistry,
    execute_pipeline,
)


class EchoLLMResource(ResourcePlugin):
    """Minimal LLM resource that simply echoes prompts."""

    stages = [PipelineStage.PARSE]
    name = "ollama"

    async def _execute_impl(self, context) -> None:
        return None

    async def generate(self, prompt: str) -> str:  # pragma: no cover - example code
        return prompt

    __call__ = generate


class CalculatorTool(ToolPlugin):
    """Evaluate a math expression safely."""

    stages = [PipelineStage.DO]

    async def execute_function(self, params: Dict[str, Any]) -> Any:  # pragma: no cover
        expression = params.get("expression")
        if expression is None:
            raise ValueError("'expression' parameter is required")
        allowed_names = {"__builtins__": {}}
        try:
            return eval(str(expression), allowed_names, {})
        except Exception as exc:  # noqa: BLE001
            raise ValueError(f"Invalid expression: {exc}") from exc


def hello_plugin(ctx):  # pragma: no cover - example code
    if "hello" in ctx.message.lower():
        return "Hello there!"
    return None


def weather_tool(params: Dict[str, Any]) -> str:  # pragma: no cover - example code
    city = params.get("city", "San Francisco")
    return f"Weather in {city} is sunny"


class WeatherTool(ToolPlugin):
    """Return a canned weather string."""

    stages = [PipelineStage.DO]

    async def execute_function(self, params: Dict[str, Any]) -> str:
        return weather_tool(params)


def setup_registries() -> SystemRegistries:
    """Set up default registries for the pipeline."""

    plugins = PluginRegistry()
    resources = ResourceRegistry()
    tools = ToolRegistry()

    tools.add("weather", WeatherTool())
    tools.add("calculator", CalculatorTool())

    resources.add("ollama", EchoLLMResource())

    plugins.register_plugin_for_stage(
        AutoGeneratedPlugin(
            hello_plugin, [PipelineStage.DO], 50, "hello_plugin", PromptPlugin
        ),
        PipelineStage.DO,
    )

    return SystemRegistries(resources=resources, tools=tools, plugins=plugins)


async def main() -> None:  # pragma: no cover - example code
    registries = setup_registries()
    response = await execute_pipeline("hello", registries)
    print(response)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())

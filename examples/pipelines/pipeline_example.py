"""Simple pipeline execution example without installing the package."""

from __future__ import annotations

import os
import pathlib
import sys
from typing import Any, Dict

# Ensure the repository's ``src`` directory is available for imports
sys.path.append(str(pathlib.Path(__file__).resolve().parents[2] / "src"))

from utilities import enable_plugins_namespace

enable_plugins_namespace()
from user_plugins.llm.unified import UnifiedLLMResource

from entity_config.environment import load_env
from pipeline import (
    AutoGeneratedPlugin,
    PipelineStage,
    PluginRegistry,
    PromptPlugin,
    ResourceContainer,
    SystemRegistries,
    ToolPlugin,
    ToolRegistry,
    execute_pipeline,
)
from pipeline.config import ConfigLoader


class CalculatorTool(ToolPlugin):
    """Evaluate a math expression safely."""

    stages = [PipelineStage.DO]

    async def execute_function(self, params: Dict[str, Any]) -> Any:  # pragma: no cover
        expression = params.get("expression")
        if expression is None:
            raise ValueError("'expression' parameter is required")
        allowed_names: dict[str, dict[str, object]] = {"__builtins__": {}}
        try:
            return eval(str(expression), allowed_names, {})
        except Exception as exc:  # noqa: BLE001
            raise ValueError(f"Invalid expression: {exc}") from exc

    async def execute(self, params: Dict[str, Any]) -> Any:
        return await self.execute_function_with_retry(params)


async def hello_plugin(ctx):  # pragma: no cover - example code
    if "hello" in ctx.message.lower():
        return "Hello there!"
    return None


def weather_tool(params: Dict[str, Any]) -> str:  # pragma: no cover - example code
    city = params.get("city", "San Francisco")
    return f"Weather in {city} is sunny"


class WeatherTool(ToolPlugin):
    """Return a canned weather string."""

    stages = [PipelineStage.DO]

    async def execute_function(self, params: Dict[str, Any]) -> str:
        return weather_tool(params)

    async def execute(self, params: Dict[str, Any]) -> str:
        return await self.execute_function_with_retry(params)


def create_llm() -> UnifiedLLMResource:
    """Return a configured LLM resource."""

    base_url = os.getenv("OLLAMA_BASE_URL")
    model = os.getenv("OLLAMA_MODEL")
    if base_url and model:
        cfg = {"provider": "ollama", "base_url": base_url, "model": model}
    else:
        cfg = {"provider": "echo"}
    return UnifiedLLMResource(ConfigLoader.from_dict(cfg))


def setup_registries() -> SystemRegistries:
    """Set up default registries for the pipeline."""
    load_env()
    plugins = PluginRegistry()
    resources = ResourceContainer()
    tools = ToolRegistry()

    tools.add("weather", WeatherTool())
    tools.add("calculator", CalculatorTool())

    resources.add("llm", create_llm())

    plugins.register_plugin_for_stage(
        AutoGeneratedPlugin(
            hello_plugin,
            [PipelineStage.DO],
            50,
            "hello_plugin",
            PromptPlugin,
        ),
        PipelineStage.DO,
    )

    return SystemRegistries(resources=resources, tools=tools, plugins=plugins)


async def main() -> None:  # pragma: no cover - example code
    registries = setup_registries()
    response = await execute_pipeline("hello", registries)
    print(response)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())

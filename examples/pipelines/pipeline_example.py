"""Simple pipeline execution example without installing the package."""

from __future__ import annotations

import pathlib
import sys
from typing import Any, Dict

# Ensure the repository's ``src`` directory is available for imports
sys.path.append(str(pathlib.Path(__file__).resolve().parents[2] / "src"))

<<<<<<< HEAD

def _enable_plugins_namespace() -> None:
    import importlib
    import pkgutil
    import types

    import pipeline.plugins
    import pipeline.plugins.resources as plugin_resources
    import pipeline.resources

    plugins_mod = types.ModuleType("plugins")
    plugins_mod.__dict__.update(vars(pipeline.plugins))
    sys.modules["plugins"] = plugins_mod
    sys.modules["plugins.resources"] = plugin_resources
    plugins_mod.resources = plugin_resources

    for _, name, _ in pkgutil.walk_packages(
        pipeline.resources.__path__, prefix="pipeline.resources."
    ):
        module = importlib.import_module(name)
        alias = name.replace("pipeline.resources.", "plugins.")
        sys.modules[alias] = module
        parent_alias = alias.rsplit(".", 1)[0]
        if parent_alias == "plugins":
            setattr(plugins_mod, alias.split(".")[-1], module)
        else:
            parent = sys.modules.setdefault(
                parent_alias, types.ModuleType(parent_alias)
            )
            setattr(parent, alias.split(".")[-1], module)


_enable_plugins_namespace()

=======
from config.environment import load_env
>>>>>>> 64d27a1aceba096733b70814249d0a84f4b3bce4
from pipeline import (
    AutoGeneratedPlugin,
    PipelineStage,
    PluginRegistry,
    PromptPlugin,
    ResourceRegistry,
    SystemRegistries,
    ToolPlugin,
    ToolRegistry,
    execute_pipeline,
)
from pipeline.config import ConfigLoader
from plugins.llm.unified import UnifiedLLMResource


class CalculatorTool(ToolPlugin):
    """Evaluate a math expression safely."""

    stages = [PipelineStage.DO]

    async def execute_function(self, params: Dict[str, Any]) -> Any:  # pragma: no cover
        expression = params.get("expression")
        if expression is None:
            raise ValueError("'expression' parameter is required")
        allowed_names: dict[str, dict[str, object]] = {"__builtins__": {}}
        try:
            return eval(str(expression), allowed_names, {})
        except Exception as exc:  # noqa: BLE001
            raise ValueError(f"Invalid expression: {exc}") from exc

    async def execute(self, params: Dict[str, Any]) -> Any:
        return await self.execute_function_with_retry(params)


async def hello_plugin(ctx):  # pragma: no cover - example code
    if "hello" in ctx.message.lower():
        return "Hello there!"
    return None


def weather_tool(params: Dict[str, Any]) -> str:  # pragma: no cover - example code
    city = params.get("city", "San Francisco")
    return f"Weather in {city} is sunny"


class WeatherTool(ToolPlugin):
    """Return a canned weather string."""

    stages = [PipelineStage.DO]

    async def execute_function(self, params: Dict[str, Any]) -> str:
        return weather_tool(params)

    async def execute(self, params: Dict[str, Any]) -> str:
        return await self.execute_function_with_retry(params)


def setup_registries() -> SystemRegistries:
    """Set up default registries for the pipeline."""
    load_env()
    plugins = PluginRegistry()
    resources = ResourceRegistry()
    tools = ToolRegistry()

    tools.add("weather", WeatherTool())
    tools.add("calculator", CalculatorTool())

    resources.add(
        "llm",
        UnifiedLLMResource(
            ConfigLoader.from_dict(
                {
                    "provider": "ollama",
                    "base_url": "${OLLAMA_BASE_URL}",
                    "model": "${OLLAMA_MODEL}",
                }
            )
        ),
    )

    plugins.register_plugin_for_stage(
        AutoGeneratedPlugin(
            hello_plugin, [PipelineStage.DO], 50, "hello_plugin", PromptPlugin
        ),
        PipelineStage.DO,
    )

    return SystemRegistries(resources=resources, tools=tools, plugins=plugins)


async def main() -> None:  # pragma: no cover - example code
    registries = setup_registries()
    response = await execute_pipeline("hello", registries)
    print(response)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
